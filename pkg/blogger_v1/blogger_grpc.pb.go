// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: blogger.proto

package blogger_v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BloggerV1Client is the client API for BloggerV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BloggerV1Client interface {
	CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogResponse, error)
	UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBlog(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogResponse, error)
	ListBlogs(ctx context.Context, in *ListBlogsRequest, opts ...grpc.CallOption) (*ListBlogsResponse, error)
}

type bloggerV1Client struct {
	cc grpc.ClientConnInterface
}

func NewBloggerV1Client(cc grpc.ClientConnInterface) BloggerV1Client {
	return &bloggerV1Client{cc}
}

func (c *bloggerV1Client) CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogResponse, error) {
	out := new(CreateBlogResponse)
	err := c.cc.Invoke(ctx, "/blogger_v1.BloggerV1/CreateBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggerV1Client) UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/blogger_v1.BloggerV1/UpdateBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggerV1Client) DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/blogger_v1.BloggerV1/DeleteBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggerV1Client) GetBlog(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogResponse, error) {
	out := new(GetBlogResponse)
	err := c.cc.Invoke(ctx, "/blogger_v1.BloggerV1/GetBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggerV1Client) ListBlogs(ctx context.Context, in *ListBlogsRequest, opts ...grpc.CallOption) (*ListBlogsResponse, error) {
	out := new(ListBlogsResponse)
	err := c.cc.Invoke(ctx, "/blogger_v1.BloggerV1/ListBlogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BloggerV1Server is the server API for BloggerV1 service.
// All implementations must embed UnimplementedBloggerV1Server
// for forward compatibility
type BloggerV1Server interface {
	CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogResponse, error)
	UpdateBlog(context.Context, *UpdateBlogRequest) (*empty.Empty, error)
	DeleteBlog(context.Context, *DeleteBlogRequest) (*empty.Empty, error)
	GetBlog(context.Context, *GetBlogRequest) (*GetBlogResponse, error)
	ListBlogs(context.Context, *ListBlogsRequest) (*ListBlogsResponse, error)
	mustEmbedUnimplementedBloggerV1Server()
}

// UnimplementedBloggerV1Server must be embedded to have forward compatible implementations.
type UnimplementedBloggerV1Server struct {
}

func (UnimplementedBloggerV1Server) CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedBloggerV1Server) UpdateBlog(context.Context, *UpdateBlogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlog not implemented")
}
func (UnimplementedBloggerV1Server) DeleteBlog(context.Context, *DeleteBlogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (UnimplementedBloggerV1Server) GetBlog(context.Context, *GetBlogRequest) (*GetBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlog not implemented")
}
func (UnimplementedBloggerV1Server) ListBlogs(context.Context, *ListBlogsRequest) (*ListBlogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlogs not implemented")
}
func (UnimplementedBloggerV1Server) mustEmbedUnimplementedBloggerV1Server() {}

// UnsafeBloggerV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BloggerV1Server will
// result in compilation errors.
type UnsafeBloggerV1Server interface {
	mustEmbedUnimplementedBloggerV1Server()
}

func RegisterBloggerV1Server(s grpc.ServiceRegistrar, srv BloggerV1Server) {
	s.RegisterService(&BloggerV1_ServiceDesc, srv)
}

func _BloggerV1_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggerV1Server).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogger_v1.BloggerV1/CreateBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggerV1Server).CreateBlog(ctx, req.(*CreateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggerV1_UpdateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggerV1Server).UpdateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogger_v1.BloggerV1/UpdateBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggerV1Server).UpdateBlog(ctx, req.(*UpdateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggerV1_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggerV1Server).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogger_v1.BloggerV1/DeleteBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggerV1Server).DeleteBlog(ctx, req.(*DeleteBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggerV1_GetBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggerV1Server).GetBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogger_v1.BloggerV1/GetBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggerV1Server).GetBlog(ctx, req.(*GetBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggerV1_ListBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggerV1Server).ListBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogger_v1.BloggerV1/ListBlogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggerV1Server).ListBlogs(ctx, req.(*ListBlogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BloggerV1_ServiceDesc is the grpc.ServiceDesc for BloggerV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BloggerV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blogger_v1.BloggerV1",
	HandlerType: (*BloggerV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlog",
			Handler:    _BloggerV1_CreateBlog_Handler,
		},
		{
			MethodName: "UpdateBlog",
			Handler:    _BloggerV1_UpdateBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _BloggerV1_DeleteBlog_Handler,
		},
		{
			MethodName: "GetBlog",
			Handler:    _BloggerV1_GetBlog_Handler,
		},
		{
			MethodName: "ListBlogs",
			Handler:    _BloggerV1_ListBlogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogger.proto",
}
